package com.brainydroid.daydreaming.network;

import android.os.AsyncTask;
import com.brainydroid.daydreaming.background.Logger;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

import java.io.IOException;

public class HttpPutTask extends AsyncTask<HttpPutData, Void, Boolean> {

    private static String TAG = "HttpPutTask";

    private HttpClient client;
    private String serverAnswer;
    private HttpConversationCallback httpConversationCallback;

    @Override
    protected void onPreExecute() {
        Logger.v(TAG, "Doing pre-execution tasks: create client and set " +
                "connection timeout");

        HttpParams httpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpParams,
                ServerConfig.NETWORK_TIMEOUT);
        client = new DefaultHttpClient(httpParams);
    }

    @Override
    protected Boolean doInBackground(HttpPutData... putDatas) {
        Logger.v(TAG, "Starting POST for data");

        try {
            HttpPutData putData = putDatas[0];
            httpConversationCallback = putData.getHttpConversationCallback();
            HttpPut httpPut = new HttpPut(putData.getPutUrl());
            StringEntity stringEntity = new StringEntity(putData.getPutString());

            httpPut.setHeader("Content-Type", putData.getContentType());
            httpPut.setEntity(stringEntity);

            HttpResponse response = client.execute(httpPut);
            HttpEntity resEntity = response.getEntity();

            if (resEntity != null) {
                try {
                    serverAnswer = EntityUtils.toString(resEntity);
                    Logger.v(TAG, "Answer successfully received and " +
                            "converted to String");
                } catch (IOException e) {
                    Logger.e(TAG, "Error converting response entity to " +
                            "String -> returning failure");
                    serverAnswer = null;
                    return false;
                }
            }
        } catch (ClientProtocolException e) {
            // FIXME: can we distinguish timeout from other errors? And report back to callback?
            Logger.e(TAG, "ClientProtocolException generated by POST -> " +
                    "returning failure");
            serverAnswer = null;
            return false;
        } catch (IOException e) {
            Logger.e(TAG, "IOException generated by POST -> returning " +
                    "failure");
            serverAnswer = null;
            return false;
        }

        return true;
    }

    @Override
    protected void onPostExecute(Boolean success) {
        if (httpConversationCallback != null) {
            Logger.v(TAG, "Calling back callback");
            httpConversationCallback.onHttpConversationFinished(success, serverAnswer);
        } else {
            Logger.e(TAG, "Work finished, but no callback to call back");
        }
    }

}
